import subprocess;
import os; 

# Matches up the current bot under development against previous version of our
# bot in a wide range of maps.
#
# Usage:
#
#
#
#
# Note: This script must be executed from the SAME working directory as its
#       current location. In order to move this script, you must update 
#	BASE_DIR to point to the base of the project (i.e. the folder containing
#	directories such a src/, test/, dist/   


# Global variables. 

# The location of the project directory.
BASE_DIR = "../../../../"
# The directory containing all the bots against
BOT_DIR = BASE_DIR + "/test/bots/"
# The route to the current MyBot.jar as generated by the ant file. 
CUR_BOT = BASE_DIR + "/dist/MyBot.jar"
# A map of all available maps: 
MAPS = {"tutorial"   : BASE_DIR + "util/tools/maps/example/tutorial1.map",
	"maze01"     : BASE_DIR + "util/tools/maps/maze/maze_02p_01.map",
	"maze02"     : BASE_DIR + "util/tools/maps/maze/maze_02p_02.map",
	"multimaze01": BASE_DIR + "util/tools/maps/multi_hill_maze/maze_02p_01.map", 
	"multimaze02": BASE_DIR + "util/tools/maps/multi_hill_maze/maze_02p_02.map", 
	"random_walk": BASE_DIR + "util/tools/maps/random_walk/random_walk_02p_01.map",
	"random_walk": BASE_DIR + "util/tools/maps/random_walk/random_walk_02p_02.map"
       } 

# A map of botnames found in BOT_DIR to their relative paths 
BOTS = {x: BOT_DIR + x for x in os.listdir(BOT_DIR)};
# Number of turns to run all our games (string representation)
NUM_TURNS = "300";


class PlayerOutcome:
	def __init__(self, score, status):
		self.status = status
	 	self.score = score	
	def __repr__(self):
		return "status = " + self.status + ". score = " + self.score

# Run a single game 
# TODO: We currently only support 2v2 gaems. In the future, make it possible for 
# 	more than two bots to play at a time. 
def rungame(bot_path_1, bot_path_2, map_path, show_visualization):

	proc = subprocess.Popen([BASE_DIR + "/util/tools/playgame2.py "  +
		"'java -jar " + bot_path_1 + "' " +
		"'java -jar " + bot_path_2 + "' " +
		"-m " + 
	 	map_path + " " +	
		"--verbose " + 
		"--turns " + NUM_TURNS + " " + 
		"--log_dir game_logs " + 
		("--nolaunch"  if not show_visualization else "")
	     ], shell=True, stdout=subprocess.PIPE);

	scores   = ['invalid', 'invalid', 'invalid'];
	statuses = ['invalid', 'invalid', 'invalid']; 

	for line in proc.stdout:
		if line.startswith("score"):
			# Expect format "score score0 score1" where 
			#  - score0 is bot1's score
			#  - score1 is bot2's score
			scores = line.rstrip('\n').split(' ') 
		if line.startswith("status"):
			# Expect format "status status0 status1" where 
			#  - status0 is bot1's status (survived, eliminated)
			#  - status1 is bot2's status (survived, eliminated)
			statuses = line.rstrip('\n').split(' ')

	return [PlayerOutcome(scores[1], statuses[1]), 
		PlayerOutcome(scores[2], statuses[2])]


# Main body
num_wins = 0;
num_ties = 0;
num_losses = 0;
for bot in BOTS.iterkeys():
	for game in MAPS.iterkeys():
		print "[Match]  Against: " + bot + ". Map: " + game
		outcome = rungame(CUR_BOT, BOTS[bot], MAPS[game], None);
		print "[Outcome] %s" % outcome

		# Populate game statistics 
		if outcome[0].score > outcome[1].score :
			num_wins = num_wins + 1 
		if outcome[0].score == outcome[1].score :
			num_ties = num_ties + 1
		if outcome[0].score < outcome[1].score :
			num_losses = num_losses + 1

print "====TOTAL STATISTICS FOR %s ====" % CUR_BOT
print "# wins = %s" % num_wins
print "# ties = %s" % num_ties
print "# losses = %s" % num_losses

